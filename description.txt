Описание проекта:

Проект на Spring Boot, сборка через gradle (war), схема базы и первоначальные данные создаются через liquidbase, работа с данными через Spring Data, база данных по умолчанию in-memory hsqldb, проверена работа также на postgresql. Для общения с клиентом - рест-сервисы, интеграционные тесты покрывают основную функциональность из ТЗ. 
Проект собирается в war(исполняемый), может быть развернут на сервере или запущен автономно. Веб интерфейс (прототип) на основе Bootstrap и jQuery

Запуск тестов:
	gradle test

Сборка проекта:
	gradle build (из корневой папки)

Способы запуска:
	a) gradle bootRun (из корневой папки)
	b) java -jar music-0.1.0.war
	c) развернуть war на сервере приложений

База данных при настройках по умолчанию будет создана автоматически в памяти. Можно использовать свою базу, указав настройки в application.properties, при наличие самой базы обязательно, схема и данные будут созданы автоматически


Сущности:
1) Album: Данная сущность представляет альбом или сборник, к которому может относиться конкретный трек Track. Если альбом в треке не указан ( null), то трек считается "синглом". Если у объекта Album не указан исполнитель (singer), то это сборник.
2) Composition: Композиция представляет собой своего рода комбинацию нот и текста песни, созданных композитором и автором текста соответственно. Результатом исполнения композиции является трек (Track). Композиция может быть исполнена сколько угодно раз, т.е. одному объекту Composition может соответствовать множество объектов Track.
3) Person: Объект Person отражает человека, который может выступать по отношению к другим сущностям как композитор, автор текста, сольный певец или участник группы.
4) Singer: Объект Singer абстрагирует понятие исполнителя трека. Это может быть сольный певец или группа. Тип солист/группа определяется полем singerType. Состав группы на конкретный момент времени определяется сущностью SingerStructure. Для солиста поле name объекта Singer может быть пустым или содержать сценический псевдоним, а SingerStructure должна связывать данный объект только с одним объектом Person.
5) SingerStructure: Объект определяет отношения между объектами Singer и Person. Например, если исполнитель Singer является группой, то SingerStructure будет содержать несколько записей со ссылкой на эту группу, в каждой из которых будет указан конкретный её участник Person с датами начала и завершения участия в ней.
6) Track: Трек является результатом исполнения(выпуска) некоторой композиции каким либо солистом, группой или комбинацией солистов и/или групп. Трек может быть выпущен "синглом" (album == null) или относиться к какому либо альбому или сборнику (но только к одному).


Примечания:
1) Предполагается что один трек может быть выпущен только в составе либо только одного альбома, либо одного сборника (т.к. выпускается, издается однократно) или быть синглом (track.album=null), т.е. 
конкретный трек не может состоять в нескольких альбомах.
2) При этом одна композиция (ноты + текст) может быть выпущена (в виде трека) многократно
3) Считаем что возможно исполнение артист + группа (пример: би2 и чичерина), и группа + группа, солист + солист и т.д.
4) Если исполнитель альбома - null то это сборник, если не null - альбом конкретного солиста или группы
5) REST-сервисы POST PUT DELETE отсутствуют, поскольку в задаче не указано функциональности, для которой они нужны.
6) В http ответах используется только код 200, т.к. все сервисы возвращают коллекции и при отсутствии записей в ответ прийдет пустая коллекция, это не будет считаться ошибкой.
7) В качестве значений по умолчанию для полей date_from и date_till таблицы singer_structure используются даты 1970-01-01 3000-01-01, т.к. не все базы поддерживают значения -infinity и infinity для timestamp
8) В созданной архитектуре возможен выпуск альбома и композиций одновременно несколькими солистами/группами
